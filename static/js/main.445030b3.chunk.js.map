{"version":3,"sources":["tweetData.jsx","App.js","serviceWorker.js","index.js","logo.svg"],"names":["tweetData","map","tweet","real","user","nickname","name","avatar","verified","locked","display","text","image","date","app","retweets","retweetsWithComments","likes","concat","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","shuffledTweetData","a","i","length","j","Math","floor","random","shuffle","App","classes","React","useState","tweetIndex","setTweetIndex","right","wrong","score","setScore","showCross","setShowCross","showCheck","setShowCheck","applyRight","setTimeout","applyWrong","className","AppBar","position","Toolbar","Typography","variant","Button","color","config","Grid","container","xs","sm","style","alignItems","justifyContent","margin","onClick","width","height","backgroundColor","Snackbar","top","anchorOrigin","vertical","horizontal","open","message","Alert","severity","AlertTitle","Zoom","in","fontSize","bottom","left","Boolean","window","location","hostname","match","createMuiTheme","palette","background","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","module","exports"],"mappings":"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","file":"static/js/main.445030b3.chunk.js","sourcesContent":["const realTweets = [\n  \"Today we express our deepest gratitude to all those who have served in our armed forces.\",\n  \"The only thing that can stop this corrupt machine is YOU. The only force strong enough to save our country is US.\",\n  \"Watching my beautiful wife, Melania, speak about our love of country and family. We will make you all very proud.\",\n  \"I am in Colorado - big day planned - but nothing can be as big as yesterday!\",\n  \"You should give the money back @HillaryClinton! #DrainTheSwamp\",\n  \"Ready to lead. Ready to Make America Great Again. #Debate #MAGA\",\n  \"Hillary is the most corrupt person to ever run for the presidency of the United States. #DrainTheSwamp\",\n  \"Wow. Unbelievable.\",\n  \"Is this really America? Terrible!\",\n  \"In my administration, EVERY American will be treated equally, protected equally, and honored equally #Debate #BigLeagueTruth\",\n  \"My team of deplorables will be taking over my Twitter account for tonights #debate #MakeAmericaGreatAgain\",\n  'Tremendous support (except for some Republican \"leadership\"). Thank you.',\n  \"Donald Trump: A President for All Americans\",\n  \"Mike Pence won big. We should all be proud of Mike!\",\n  'Crooked Hillary Clinton is totally unfit to be our president-really bad judgement and a temperament, according to new book, which is a mess!',\n  '\"I believe in God who can change people- he can make any of us better.\"',\n  'We are going to WIN and MAKE AMERICA GREAT AGAIN, maybe better than ever before!I am attracting the biggest crowds, by far, and the best poll numbers, also by far.',\n  'The failing @nytimes should focus on fair and balanced reporting rather than constant hit jobs on me. Yesterday 3 boring articles, today 2!',\n  'We need to secure our borders ASAP. No games, we must be smart, tough and vigilant. MAKE AMERICA GREAT AGAIN & MAKE AMERICA STRONG AGAIN!',\n];\n\nconst fakeTweets = [\n  \"I am very smart. I will bring our jobs back to the U.S. and keep our companies from leaving. #MakeAmericaGreatAgain\",\n  \"Going to Salt Lake City, Utah- big rally! We are going to WIN! I will make America safe again for everyone.\",\n  \"Very few people read the National Review. BAD! I have never met @nytdavidbrooks of the NY Times. He should be fired!\",\n  \"I am leading big in all polls. Polls are best ever! Easy win!\",\n  \"Nobody else can do it. AMERICA GREAT AGAIN! MAKE AMERICA SAFE AGAIN!\",\n  \"Hillary’s disastrous judgment gave us ISIS, rise of Iran, and the worst economic crisis in the last 50 years! I won۪t forget. People very unhappy with Crooked Hillary. #NeverHillaryCrooked\",\n  \"There are thousands of victims of illegal immigration. They will do NOTHING to stop it. Clinton has been doing this for THIRTY YEARS...\",\n  \"I am leading big in all polls. The Republican Party needs strong and committed leader. #Trump2016\",\n  \"Great people on the spot. I wonder what CNN will do. The Veterans appreciate it!\",\n  \"The failing @nytimes wrote yet another hit piece on me. FAKE NEWS!\",\n  \"Many people are now saying I won South Carolina by big margins. Big shocker!\",\n  \"Jeb Bush and Ted Cruz are not electable presidential candidates and that's what you'll get if you vote for them!\",\n  \"Never bad judgment. It is fantastic- everybody loves it!\",\n  \"#MakeAmericaGreatAgain\",\n  \"Really good night! AMERICA GREAT AGAIN! MAKE AMERICA SAFE AGAIN!\",\n  \"So many veterans groups are supporting me! The Veterans appreciate it!\",\n  \"Sleepy Joe Biden day plaining to go to New Hampshire. His record = BAD! #MakeAmericaGreatAgain\",\n];\n\nexport const tweetData = realTweets\n  .map((tweet) => ({\n    real: true,\n    user: {\n      nickname: \"realDonaldTrump\",\n      name: \"Donald J. Trump\",\n      avatar:\n        \"https://pbs.twimg.com/profile_images/874276197357596672/kUuht00m_400x400.jpg\",\n      verified: true,\n      locked: false,\n    },\n    display: \"default\",\n    text: tweet,\n    image: \"\",\n    date: \"3:32 PM · Feb 14, 2016\",\n    app: \"Twitter for iPhone\",\n    retweets: 1017,\n    retweetsWithComments: 103,\n    likes: 2313,\n  }))\n  .concat(\n    fakeTweets.map((tweet) => ({\n      real: false,\n      user: {\n        nickname: \"realDonaldTrump\",\n        name: \"Donald J. Trump\",\n        avatar:\n          \"https://pbs.twimg.com/profile_images/874276197357596672/kUuht00m_400x400.jpg\",\n        verified: true,\n        locked: false,\n      },\n      display: \"default\",\n      text: tweet,\n      image: \"\",\n      date: \"3:32 PM · Feb 14, 2016\",\n      app: \"Twitter for iPhone\",\n      retweets: 1017,\n      retweetsWithComments: 103,\n      likes: 2313,\n    }))\n  );\n","import React, { useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport FakeTweet from \"fake-tweet\";\nimport \"fake-tweet/build/index.css\";\nimport { tweetData } from \"./tweetData\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Button from \"@material-ui/core/Button\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport AlertTitle from \"@material-ui/lab/AlertTitle\";\nimport Zoom from \"@material-ui/core/Zoom\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\n\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n}));\n\nfunction shuffle(a) {\n  for (let i = a.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [a[i], a[j]] = [a[j], a[i]];\n  }\n  return a;\n}\n\nconst shuffledTweetData = shuffle(tweetData);\n\nfunction App() {\n  const classes = useStyles();\n\n  const [tweetIndex, setTweetIndex] = React.useState(0);\n  const [score, setScore] = React.useState({ right: 0, wrong: 0 });\n  const [showCross, setShowCross] = React.useState(false);\n  const [showCheck, setShowCheck] = React.useState(false);\n  // const shuffledTweetData = shuffle(tweetData);\n  // const [shuffledTweetData, setShuffledTweetData] = React.useState((tweetData));\n  // const shuffledTweetData = shuffle(tweetData);\n\n  // useEffect(() => {\n  //   console.log(\"Use effect\");\n  //   let shuffled = shuffle(shuffledTweetData);\n  //   console.log(shuffled);\n  //   setShuffledTweetData(shuffled);\n  // }, []);\n\n  const applyRight = () => {\n    setShowCheck(true);\n    setTimeout(() => {\n      setShowCheck(false);\n    }, 500);\n    setScore({\n      right: score.right + 1,\n      wrong: score.wrong,\n    });\n    if (tweetIndex === shuffledTweetData.length - 1) {\n      setTweetIndex(0);\n    } else {\n      setTweetIndex(tweetIndex + 1);\n    }\n  };\n\n  const applyWrong = () => {\n    setShowCross(true);\n    setTimeout(() => {\n      setShowCross(false);\n    }, 500);\n    setScore({\n      right: score.right,\n      wrong: score.wrong + 1,\n    });\n    if (tweetIndex === shuffledTweetData.length - 1) {\n      setTweetIndex(0);\n    } else {\n      setTweetIndex(tweetIndex + 1);\n    }\n  };\n\n  const clickReal = () => {\n    if (shuffledTweetData[tweetIndex].real === true) {\n      applyRight();\n    } else {\n      applyWrong();\n    }\n  };\n\n  const clickFake = () => {\n    if (shuffledTweetData[tweetIndex].real === false) {\n      applyRight();\n    } else {\n      applyWrong();\n    }\n  };\n\n  return (\n    <div className=\"App\" className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Trumperator\n          </Typography>\n          <Button color=\"inherit\">Maishacks 2020</Button>\n        </Toolbar>\n      </AppBar>\n      <div>\n        <FakeTweet config={shuffledTweetData[tweetIndex]} />\n        <Grid\n          container\n          spacing={10}\n          xs={12}\n          sm={6}\n          style={{\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            margin: \"auto\",\n          }}\n        >\n          <Button\n            onClick={() => clickReal()}\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ width: \"40%\", height: 60, backgroundColor: \"green\" }}\n          >\n            Real\n          </Button>\n          <Button\n            onClick={() => clickFake()}\n            variant=\"contained\"\n            style={{\n              width: \"40%\",\n              height: 60,\n              backgroundColor: \"red\",\n              color: \"white\",\n            }}\n          >\n            Fake\n          </Button>\n        </Grid>\n      </div>\n      <Snackbar\n        /* style={{ height: \"100%\" }} */\n        style={{ top: 80 }}\n        anchorOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n        open={true}\n        message=\"Score\"\n      >\n        <Alert variant=\"filled\" severity=\"info\">\n          <AlertTitle>Score</AlertTitle>\n          Right {score.right} - Wrong {score.wrong}\n        </Alert>\n      </Snackbar>\n      <Zoom in={showCheck}>\n          <DoneIcon\n            style={{\n              fontSize: \"400px\",\n              position: \"absolute\",\n              margin: \"auto\",\n              top: 0,\n              right: 0,\n              bottom: 75,\n              left: 0,\n              /* left: \"-50%\", */\n              /* top: \"-50%\", */\n              color: \"green\",\n            }}\n          />\n      </Zoom>\n      <Zoom in={showCross}>\n          <ClearIcon\n            style={{\n              fontSize: \"400px\",\n              position: \"absolute\",\n              left: 0,\n              right: 0,\n              bottom: 75,\n              top: 0,\n              margin: \"auto\",\n              /* position: \"relative\", */\n              /* left: \"-50%\", */\n              /* top: \"-50%\", */\n              color: \"red\",\n            }}\n          />\n      </Zoom>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { purple } from \"@material-ui/core/colors\";\n// import Button from \"@material-ui/core/Button\";\n\nconst theme = createMuiTheme({\n  palette: {\n    background: {\n      // default: \"black\"\n    }\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <CssBaseline/>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}